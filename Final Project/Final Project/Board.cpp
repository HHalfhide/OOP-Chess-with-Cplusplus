#include"Board.h"
#include "Piece.h"


#include<iostream>


board::board() 
{
	for (int i{}; i < 64; i++) squares.push_back(nullptr);
}



void board::move_piece(int o, int n) 
{
	squares[n] = squares[o];
    squares[o] = nullptr;
}

void board::print_board(std::vector<int> allowed, std::vector<std::string> p1_moves, std::vector<std::string> p2_moves, int player)
{
	// Create empty board
	char display[30][76] = {
	{' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_','_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_','_', '_','_', '_', '_', '_', '_', '_', '_', '_', '_', ' '},
	{'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'H', 'E', 'S', 'S', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'P', '1', ' ',' ', ' ',' ', ' ', 'P', '2', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',' ', ' ', ' ', ' ', '_', '_', '_', '_', '_', '_', '_','_', '_','_', '_', '_', '_', '_', '_', '_', '_', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', ' ', ' ', ' ', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|', '_', '_', '_', '_', '_', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', '|',' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|'},
	{'|', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_','_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_','_', '_','_', '_', '_', '_', '_', '_', '_', '_', '_', '|'},
	};

	std::string alpha{ "ABCDEFGH" };
	std::string num{ "76543210" };
	// Flip letters and numbers depending on whose turn it is (dictates where you are viewing board from)
	if (player == 1) {
		for (int i{}; i < 8; i++) {
			display[3][7 + (6 * i)] = alpha[i];
			display[6 + (3 * i)][2] = num[i];
		}
	}
	else {
		for (int i{}; i < 8; i++) {
			display[3][7 + (6 * i)] = alpha[7-i];
			display[6 + (3 * i)][2] = num[7-i];
		}
	}

	// Fill in pieces
	for (int i{}; i < 64; i++) {
		int col, row;
		// Flip rest of board 
		if (player == 1) {
			col=((i % 8) * 6) + 7 ;
			row = 27 - (3 * int{i / 8}) ;
		}
		else {
			col= 49 - (6 * (i % 8)) ;
			row=(3 * (int{i / 8}+1))+3 ;
		}
		if (squares[i] != nullptr) {
			// Set player
			char disp_player;
			if (squares[i]->get_player() == 1) disp_player = '1';
			else disp_player = '2';
			display[row][col + 1] = disp_player;
			//Set piece type
			if (squares[i]->check_type() == "pawn") display[row][col] = 'P';
			else if (squares[i]->check_type() == "rook") display[row][col] = 'R';
			else if (squares[i]->check_type() == "knight") display[row][col] = 'N';
			else if (squares[i]->check_type() == "king") display[row][col] = 'K';
			else if (squares[i]->check_type() == "bishop") display[row][col] = 'B';
			else display[row][col] = 'Q';
		}
		// Display allowed moves 
		for (auto allowed_it = allowed.begin(); allowed_it < allowed.end(); allowed_it++) {
			if (*allowed_it == i) display[row - 1][col - 2] = '*';
		}
	}

	// Find start and end positions of 24 most recent moves
	int p1_start;
	int p1_end;
	if (p1_moves.size() > 24) {
		p1_start = p1_moves.size() - 24;
		p1_end = 24;
	}
	else {
		p1_start = 0;
		p1_end = static_cast<int>(p1_moves.size());
	}
	// Fill in Pieces
	for (int j{}; j < p1_end; j++) {
		for (int i{}; i < static_cast<int>(p1_moves[j].length()); i++) {
			display[5 + j][57 + i] = p1_moves[j+p1_start][i];
		}
	}

	// Do the same for player 2 
	int p2_start;
	int p2_end;
	if (p2_moves.size() > 24) {
		p2_start = p2_moves.size() - 24;
		p2_end = 24;
	}
	else {
		p2_start = 0;
		p2_end = static_cast<int>(p2_moves.size());
	}
	// Fill in pieces
	for (int j{}; j < p2_end; j++) {
		for (int i{}; i < static_cast<int>(p2_moves[j].length()); i++) {
			display[5 + j][67 + i] = p2_moves[j + p2_start][i];
		}
	}
	
	// Print out board
	for (int i {}; i < 30; i++) {
		std::cout << std::endl;
		for (int j = 0; j < 76; j++) {
			std::cout << display[i][j];
		}
	}
}

// Checks whether player is in check
bool board::check_check(int player)
{
	bool check{ false };
	int player_king_pos{};

	// Find the position of the players king
	for (int i{}; i < 64; i++) {
		if (squares[i] != nullptr && squares[i]->check_type() == "king" && squares[i]->get_player() == player) player_king_pos = i;
	}

	for (int i{}; i < 64; i++) {
		// Find opponent players pieces
		if (squares[i] != nullptr && squares[i]->get_player() != player) {
			std::vector<int> allowed_opp_moves;
			// Obtain allowed moves for opponents piece 
			allowed_opp_moves = squares[i]->allowed_moves(*this, i);
			// Check whether piece can take players' king
			if (std::find(allowed_opp_moves.begin(), allowed_opp_moves.end(), player_king_pos) != allowed_opp_moves.end()) check = true;
		}
	}
	return check;
}





